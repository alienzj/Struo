# rule db_download:
#     params:
#         url = config['genomes_url']
#     output:
#         config['tmp_dir'] + 'database.tar.gz'
#     log:
#         log_dir + 'db_download.log'
#     shell:
#         """
#         OUTDIR=`dirname {output}`
#         wget {params.url} -o {output} 2> {log}
#         """

localrules: kraken_build_download_tax

rule kraken2_build_download_tax:
    """
    Downloading NCBI taxonomy
    """
    output:
        est = ancient(kraken2_dir + 'taxonomy/nucl_est.accession2taxid'),
        gb = ancient(kraken2_dir + 'taxonomy/nucl_gb.accession2taxid'),
        gss = ancient(kraken2_dir + 'taxonomy/nucl_gss.accession2taxid'),
        wgs = ancient(kraken2_dir + 'taxonomy/nucl_wgs.accession2taxid'),
        dump = ancient(kraken2_dir + 'taxonomy/taxdump.tar.gz'),
        nodes = ancient(kraken2_dir + 'taxonomy/nodes.dmp'),
        names = ancient(kraken2_dir + 'taxonomy/names.dmp'),
        merged = ancient(kraken2_dir + 'taxonomy/merged.dmp')
    conda:
        '../envs/kraken2.yaml'
    log:
        log_dir + 'kraken_build_download_tax/all.log'
    benchmark:
        benchmark_dir + 'kraken_build_download_tax/all.txt'
    shell:
        """
        OUTDIR=`dirname {output.est}`
        OUTDIR=`dirname $OUTDIR`
        echo "# Downloading NCBI taxonomy to $OUTDIR" > {log}

        kraken2-build --download-taxonomy --db $OUTDIR 2>&1 >> {log}
        """

rule kraken2_add_taxID:
    """
    Adding a taxononmy ID to the header of each genome.
    Assuming the taxID is in the samples table.
    Writing edited genome to temp dir.

    Format: `kraken:taxid|<taxID>|<seqID>`
    """
    input:
        fasta = lambda wildcards: config['samples'].loc[wildcards.sample, config['fasta_file_path_col']]
    output:
        temp(config['tmp_dir'] + '{sample}.fna')
    params:
        taxID = lambda wildcards: config['samples'].loc[wildcards.sample, config['taxID_col']].astype(str),
        exe = config['pipeline']['script_folder'] + 'kraken2_rename_genome.py'
    log:
        log_dir + 'kraken2_add_taxID/{sample}.log'
    benchmark:
        benchmark_dir + 'kraken2_add_taxID/{sample}.txt'
    shell:
        """
        {params.exe} {input.fasta} {params.taxID} > {output} 2> {log}
        """

rule kraken2_build_add:
    """
    Adding genome fasta files to the kraken database.
    Using the --add-to-library flag
    """
    input:
        fasta = config['tmp_dir'] + '{sample}.fna',
        est = kraken2_dir + 'taxonomy/nucl_est.accession2taxid',
        gb = kraken2_dir + 'taxonomy/nucl_gb.accession2taxid',
        gss = kraken2_dir + 'taxonomy/nucl_gss.accession2taxid',
        wgs = kraken2_dir + 'taxonomy/nucl_wgs.accession2taxid',
        nodes = kraken2_dir + 'taxonomy/nodes.dmp',
        names = kraken2_dir + 'taxonomy/names.dmp'
    output:
        touch(kraken2_dir + '{sample}_added.done')
    conda:
        '../envs/kraken2.yaml'
    log:
        log_dir + 'kraken2_build_add/{sample}.log'
    benchmark:
        benchmark_dir + 'kraken2_build_add/{sample}.txt'
    shell:
        """
        DB=`dirname {input.est}`
        DB=`dirname $DB`

        kraken2-build --db $DB --add-to-library {input.fasta}  2>&1 > {log}
        """
    
rule kraken2_build:
    """
    Building the kraken database
    """
    input:
        expand(kraken2_dir + '{sample}_added.done',
	       sample = config['samples_unique'])
    output:
        hash = kraken2_dir + 'hash.k2d',
	opts = kraken2_dir + 'opts.k2d',
	map  = kraken2_dir + 'seqid2taxid.map',
	taxo = kraken2_dir + 'taxo.k2d'
    threads:
        30
    resources:
        time = lambda wildcards, attempt: attempt * 2 * 60 * 24,
        mem_gb_pt = lambda wildcards, attempt: attempt * 2 * 124
    conda:
        '../envs/kraken2.yaml'
    log:
        log_dir + 'kraken2_build/all.log'
    benchmark:
        benchmark_dir + 'kraken2_build/all.txt'
    shell:
        """
        DB=`dirname {output.hash}`

        kraken2-build --build --threads {threads} --db $DB 2>&1 > {log}
        """
    
